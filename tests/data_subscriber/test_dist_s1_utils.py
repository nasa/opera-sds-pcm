#!/usr/bin/env python3

import pytest
import conftest
import pickle
from data_subscriber.dist_s1_utils import localize_dist_burst_db, compute_dist_s1_triggering, build_rtc_native_ids

_DENORM_GRANULES = [('OPERA_L2_RTC-S1_T025-052667-IW2_20240312T102159Z', '19MCP_0_310'), ('OPERA_L2_RTC-S1_T025-052666-IW2_20240312T102156Z', '19MCP_0_310'), ('OPERA_L2_RTC-S1_T025-052666-IW1_20240312T102155Z', '19MCP_0_310'), ('OPERA_L2_RTC-S1_T025-052665-IW2_20240312T102154Z', '19MCP_0_310'), ('OPERA_L2_RTC-S1_T025-052665-IW1_20240312T102153Z', '19MCP_0_310'), ('OPERA_L2_RTC-S1_T025-052664-IW2_20240312T102151Z', '19MCP_0_310'), ('OPERA_L2_RTC-S1_T025-052664-IW1_20240312T102150Z', '19MCP_0_310'), ('OPERA_L2_RTC-S1_T025-052663-IW2_20240312T102148Z', '19MCP_0_310'), ('OPERA_L2_RTC-S1_T025-052663-IW1_20240312T102147Z', '19MCP_0_310'), ('OPERA_L2_RTC-S1_T025-052662-IW3_20240312T102146Z', '19MCP_0_310'), ('OPERA_L2_RTC-S1_T025-052662-IW2_20240312T102145Z', '19MCP_0_310'), ('OPERA_L2_RTC-S1_T025-052662-IW1_20240312T102144Z', '19MCP_0_310'), ('OPERA_L2_RTC-S1_T025-052661-IW3_20240312T102143Z', '19MCP_0_310'), ('OPERA_L2_RTC-S1_T025-052661-IW1_20240312T102142Z', '19MCP_0_310'), ('OPERA_L2_RTC-S1_T025-052661-IW2_20240312T102142Z', '19MCP_0_310'), ('OPERA_L2_RTC-S1_T025-052660-IW3_20240312T102141Z', '19MCP_0_310'), ('OPERA_L2_RTC-S1_T025-052660-IW2_20240312T102140Z', '19MCP_0_310'), ('OPERA_L2_RTC-S1_T025-052660-IW1_20240312T102139Z', '19MCP_0_310'), ('OPERA_L2_RTC-S1_T168-359426-IW2_20231217T052407Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359429-IW3_20231217T052416Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359423-IW3_20231217T052359Z', '32VPM_6_302'), ('OPERA_L2_RTC-S1_T168-359422-IW3_20231217T052356Z', '33VVG_5_302'), ('OPERA_L2_RTC-S1_T168-359422-IW3_20231217T052356Z', '32VPM_6_302'), ('OPERA_L2_RTC-S1_T168-359428-IW1_20231217T052411Z', '33VWF_4_302'), ('OPERA_L2_RTC-S1_T168-359427-IW2_20231217T052409Z', '33VWF_4_302'), ('OPERA_L2_RTC-S1_T168-359425-IW2_20231217T052404Z', '33VWF_4_302'), ('OPERA_L2_RTC-S1_T168-359445-IW3_20231217T052500Z', '32VPH_6_302'), ('OPERA_L2_RTC-S1_T168-359444-IW3_20231217T052457Z', '33VUC_5_302'), ('OPERA_L2_RTC-S1_T168-359423-IW1_20231217T052357Z', '33VWG_5_302'), ('OPERA_L2_RTC-S1_T168-359429-IW1_20231217T052414Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359427-IW1_20231217T052408Z', '33VWF_4_302'), ('OPERA_L2_RTC-S1_T168-359445-IW1_20231217T052458Z', '33UWB_4_302'), ('OPERA_L2_RTC-S1_T168-359444-IW2_20231217T052456Z', '33VUC_5_302'), ('OPERA_L2_RTC-S1_T168-359440-IW2_20231217T052445Z', '33VUC_5_302'), ('OPERA_L2_RTC-S1_T168-359427-IW1_20231217T052408Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359423-IW3_20231217T052359Z', '33VUF_5_302'), ('OPERA_L2_RTC-S1_T168-359423-IW1_20231217T052357Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359427-IW3_20231217T052410Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359426-IW3_20231217T052408Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359425-IW1_20231217T052403Z', '33VWF_4_302'), ('OPERA_L2_RTC-S1_T168-359444-IW3_20231217T052457Z', '32VPH_6_302'), ('OPERA_L2_RTC-S1_T168-359443-IW3_20231217T052454Z', '32VPH_6_302'), ('OPERA_L2_RTC-S1_T168-359440-IW3_20231217T052446Z', '32VPH_6_302'), ('OPERA_L2_RTC-S1_T168-359441-IW3_20231217T052449Z', '33VUC_5_302'), ('OPERA_L2_RTC-S1_T168-359441-IW2_20231217T052448Z', '33VUC_5_302'), ('OPERA_L2_RTC-S1_T168-359444-IW2_20231217T052456Z', '33UUB_5_302'), ('OPERA_L2_RTC-S1_T168-359443-IW3_20231217T052454Z', '33VUC_5_302'), ('OPERA_L2_RTC-S1_T168-359428-IW2_20231217T052412Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359424-IW3_20231217T052402Z', '33VVG_5_302'), ('OPERA_L2_RTC-S1_T168-359424-IW3_20231217T052402Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359425-IW1_20231217T052403Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359423-IW3_20231217T052359Z', '33VVG_5_302'), ('OPERA_L2_RTC-S1_T168-359424-IW1_20231217T052400Z', '33VWF_4_302'), ('OPERA_L2_RTC-S1_T168-359423-IW3_20231217T052359Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359442-IW3_20231217T052452Z', '33VUC_5_302'), ('OPERA_L2_RTC-S1_T168-359445-IW3_20231217T052500Z', '32UPG_5_302'), ('OPERA_L2_RTC-S1_T168-359445-IW3_20231217T052500Z', '33UUB_5_302'), ('OPERA_L2_RTC-S1_T168-359444-IW1_20231217T052455Z', '33UVB_4_302'), ('OPERA_L2_RTC-S1_T168-359442-IW3_20231217T052452Z', '32VPH_6_302'), ('OPERA_L2_RTC-S1_T168-359425-IW3_20231217T052405Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359424-IW2_20231217T052401Z', '33VVG_5_302'), ('OPERA_L2_RTC-S1_T168-359423-IW3_20231217T052359Z', '33VUG_5_302'), ('OPERA_L2_RTC-S1_T168-359423-IW2_20231217T052358Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359423-IW2_20231217T052358Z', '33VWG_5_302'), ('OPERA_L2_RTC-S1_T168-359439-IW3_20231217T052443Z', '33VUC_5_302'), ('OPERA_L2_RTC-S1_T168-359445-IW2_20231217T052459Z', '33UVB_4_302'), ('OPERA_L2_RTC-S1_T168-359424-IW2_20231217T052401Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359424-IW1_20231217T052400Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359428-IW1_20231217T052411Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359426-IW2_20231217T052407Z', '33VWF_4_302'), ('OPERA_L2_RTC-S1_T168-359423-IW2_20231217T052358Z', '33VWF_4_302'), ('OPERA_L2_RTC-S1_T168-359442-IW2_20231217T052451Z', '33VUC_5_302'), ('OPERA_L2_RTC-S1_T168-359440-IW3_20231217T052446Z', '33VUC_5_302'), ('OPERA_L2_RTC-S1_T168-359445-IW3_20231217T052500Z', '33VUC_5_302'), ('OPERA_L2_RTC-S1_T168-359425-IW2_20231217T052404Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359429-IW2_20231217T052415Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359426-IW1_20231217T052406Z', '33VWF_4_302'), ('OPERA_L2_RTC-S1_T168-359424-IW2_20231217T052401Z', '33VWF_4_302'), ('OPERA_L2_RTC-S1_T168-359423-IW2_20231217T052358Z', '33VVG_5_302'), ('OPERA_L2_RTC-S1_T168-359423-IW1_20231217T052357Z', '33VWF_4_302'), ('OPERA_L2_RTC-S1_T168-359439-IW2_20231217T052442Z', '33VUC_5_302'), ('OPERA_L2_RTC-S1_T168-359445-IW2_20231217T052459Z', '33VUC_5_302'), ('OPERA_L2_RTC-S1_T168-359444-IW2_20231217T052456Z', '33UVB_4_302'), ('OPERA_L2_RTC-S1_T168-359445-IW2_20231217T052459Z', '33UUB_5_302'), ('OPERA_L2_RTC-S1_T168-359443-IW2_20231217T052453Z', '33VUC_5_302'), ('OPERA_L2_RTC-S1_T168-359426-IW1_20231217T052406Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359424-IW3_20231217T052402Z', '33VUG_5_302'), ('OPERA_L2_RTC-S1_T168-359422-IW3_20231217T052356Z', '33VUG_5_302'), ('OPERA_L2_RTC-S1_T168-359445-IW1_20231217T052458Z', '33UVB_4_302'), ('OPERA_L2_RTC-S1_T168-359444-IW1_20231217T052455Z', '33UWB_4_302'), ('OPERA_L2_RTC-S1_T168-359441-IW3_20231217T052449Z', '32VPH_6_302'), ('OPERA_L2_RTC-S1_T168-359429-IW1_20231217T052414Z', '33VWF_4_302'), ('OPERA_L2_RTC-S1_T168-359428-IW3_20231217T052413Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359427-IW2_20231217T052409Z', '33VVF_4_302'), ('OPERA_L2_RTC-S1_T168-359424-IW3_20231217T052402Z', '32VPM_6_302')]

dist_products, bursts_to_products, product_to_bursts, all_tile_ids = localize_dist_burst_db()

def test_burst_map_pickle():
    '''Test that we can pickle and unpickle burst map files'''

    dist_products, bursts_to_products, product_to_bursts, all_tile_ids = localize_dist_burst_db()

    # Save the lengths of all the objects for comparison after unpickling
    dist_products_len = len(dist_products)
    bursts_to_products_len = len(bursts_to_products)
    product_to_bursts_len = len(product_to_bursts)
    all_tile_ids_len = len(all_tile_ids)

    # First, pickle dist_products, bursts_to_products, product_to_bursts, all_tile_ids into a single file
    with open("dist_products.pickle", "wb") as f:
        pickle.dump((dist_products, bursts_to_products, product_to_bursts, all_tile_ids), f)

    # Now, unpickle the file
    with open("dist_products.pickle", "rb") as f:
        dist_products, bursts_to_products, product_to_bursts, all_tile_ids = pickle.load(f)

    # Check that the lengths of the unpickled objects are the same as the original ones
    assert len(dist_products) == dist_products_len
    assert len(bursts_to_products) == bursts_to_products_len
    assert len(product_to_bursts) == product_to_bursts_len
    assert len(all_tile_ids) == all_tile_ids_len

def test_compute_dist_s1_triggering_incomplete():
    """Given a list of granules, test that we are extending additional granules for bursts that belong to two frames"""

    products_triggered, granules_triggered, _, _ = (
        compute_dist_s1_triggering(bursts_to_products, product_to_bursts, _DENORM_GRANULES, False,None))

    assert len(products_triggered) == 14
    print(products_triggered)

    assert len(products_triggered["19MCP_0_310"].rtc_granules) == 18
    assert len(products_triggered["33VVF_4_302"].rtc_granules) == 21
    assert len(products_triggered["33VUC_5_302"].rtc_granules) == 14
    assert len(products_triggered["33UUB_5_302"].rtc_granules) == 3
    assert len(products_triggered["33VWF_4_302"].rtc_granules) == 12


def test_compute_dist_s1_triggering_complete():
    """Given a list of granules, test that we are extending additional granules for bursts that belong to two frames"""

    products_triggered, granules_triggered, _, _ = (
        compute_dist_s1_triggering(bursts_to_products, product_to_bursts, _DENORM_GRANULES, True,None))

    assert len(products_triggered) == 1

    assert len(products_triggered["19MCP_0_310"].rtc_granules) == 18

def test_build_rtc_native_ids():
    '''Test building up rtc native ids'''
    l, native_id = build_rtc_native_ids("32RLV_3", product_to_bursts)
    #print("----------------------------------")
    assert l == 16
    assert native_id == \
           "OPERA_L2_RTC-S1_T168-359591-IW1*&native-id[]=OPERA_L2_RTC-S1_T168-359591-IW2*&native-id[]=OPERA_L2_RTC-S1_T168-359592-IW1*&native-id[]=OPERA_L2_RTC-S1_T168-359592-IW2*&native-id[]=OPERA_L2_RTC-S1_T168-359593-IW1*&native-id[]=OPERA_L2_RTC-S1_T168-359593-IW2*&native-id[]=OPERA_L2_RTC-S1_T168-359594-IW1*&native-id[]=OPERA_L2_RTC-S1_T168-359594-IW2*&native-id[]=OPERA_L2_RTC-S1_T168-359595-IW1*&native-id[]=OPERA_L2_RTC-S1_T168-359595-IW2*&native-id[]=OPERA_L2_RTC-S1_T168-359596-IW1*&native-id[]=OPERA_L2_RTC-S1_T168-359596-IW2*&native-id[]=OPERA_L2_RTC-S1_T168-359597-IW1*&native-id[]=OPERA_L2_RTC-S1_T168-359597-IW2*&native-id[]=OPERA_L2_RTC-S1_T168-359598-IW1*&native-id[]=OPERA_L2_RTC-S1_T168-359598-IW2*"