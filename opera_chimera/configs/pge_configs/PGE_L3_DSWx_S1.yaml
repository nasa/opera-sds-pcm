#######################################################################
# PGE configuration for L3_DSWx_S1.
#######################################################################

# The runconfig section is intended to be used for dynamically generating the runconfig file used
# when running the OPERA PGEs. Any values set with a "__CHIMERA_VAL__" should be filled in by the input
# preprocessor. Otherwise, a precondition evaluation error will be raised by chimera.
#
# The runconfig section is also used as the data dict for the RunConfig jinja2 template.
# Accordingly, the schema here does NOT need to match the final RunConfig.yaml schema.
#
# * See RunConfig_schema.<label>.yaml for RunConfig.yaml documentation.
# * See related `RunConfig.yaml.<label>.jinja2.tmpl` file
#  and `util.conf_util.RunConfig.__init__()` for jinja2 usage.
runconfig:
  input_file_group:
    input_file_paths: __CHIMERA_VAL__
    input_mgrs_collection_id: __CHIMERA_VAL__
  dynamic_ancillary_file_group:
    dem_file:  __CHIMERA_VAL__
    hand_file: __CHIMERA_VAL__
    worldcover_file: __CHIMERA_VAL__
    reference_water_file: __CHIMERA_VAL__
    glad_classification_file: __CHIMERA_VAL__
  static_ancillary_file_group:
    mgrs_database_file: __CHIMERA_VAL__
    mgrs_collection_database_file: __CHIMERA_VAL__
  product_path_group:
    product_version: __CHIMERA_VAL__
    product_path: /home/dswx_user/output_dir
    scratch_path: /home/dswx_user/scratch_dir
  processing:
    algorithm_parameters: __CHIMERA_VAL__
  cnm_version: "__CHIMERA_VAL__"

# This lists all the precondition evaluation steps that this PGE needs to run prior to running the PGE.
preconditions:
  - get_product_version
  - get_cnm_version
  - set_daac_product_type
  - get_s3_input_filepaths
  - get_static_ancillary_files
  - get_dswx_s1_mgrs_collection_id
  - get_dswx_s1_dynamic_ancillary_maps
  - get_dswx_s1_dem
  - get_dswx_s1_num_workers
  - get_dswx_s1_algorithm_parameters
  - instantiate_algorithm_parameters_template

# This lists all the postprocessor steps that this PGE will run after running the PGE.
postprocess:
  - update_product_accountability

set_sample_product_metadata:
  s3_bucket: "opera-dev-lts-fwd-collinss"
  s3_key: "sample_dswx_s1_product_metadata.json"

get_product_version:
  version_key: "DSWX_S1_PRODUCT_VERSION"

set_daac_product_type:
  template: OPERA_L3_DSWX_S1_{cnm_version}

get_static_ancillary_files:
  # The s3 locations of each of the static ancillary file types used by DSWx-S1
  mgrs_database_file:
    s3_bucket: "opera-ancillaries"
    s3_key: "mgrs_tiles/dswx_s1/MGRS_tile_v0.3.sqlite"
  mgrs_collection_database_file:
    s3_bucket: "opera-ancillaries"
    s3_key: "mgrs_tiles/dswx_s1/MGRS_tile_collection_v0.3.sqlite"

get_dswx_s1_dynamic_ancillary_maps:
  # The s3 locations of the ancillary map VRT files (excluding DEM) used by DSWx-S1
  hand_file:
    s3_bucket: "opera-hand"
    s3_key: "v1/2021/glo-30-hand-2021.vrt"
  worldcover_file:
    s3_bucket: "opera-world-cover"
    s3_key: "v100/2020/ESA_WorldCover_10m_2020_v100_Map_AWS.vrt"
  reference_water_file:
    s3_bucket: "opera-reference-water"
    s3_key: "2021/occurrence/occurrence_v1_4_2021.vrt"
    # TODO: The following water map is also available, need to confirm with ADT
    #       which will be used in the long run
    # s3_key: "2021/seasonality/seasonality_v1_4_2021.vrt"
  glad_classification_file:
    s3_bucket: "opera-land-cover"
    s3_key: "GLCLU2000-2020/v2/2020/GLAD_2020_land_cover.vrt"

get_dswx_s1_dem:
  # The s3 location containing the global DEM(s) to download regions from
  s3_bucket: "opera-dem"
  s3_key: "v1.1"

get_dswx_s1_algorithm_parameters:
  s3_bucket: "opera-ancillaries"
  s3_key: "algorithm_parameters/dswx_s1/dswx_s1_algorithm_parameters_final_1.0.0.yaml.tmpl"

instantiate_algorithm_parameters_template:
  template_mapping:
    num_workers: __NUMBER_CPU__

# This function will add to the PGE output metadata when product to dataset conversion is performed
set_extra_pge_output_metadata:
   daac_product_type: daac_product_type

# List the extensions that the PGE generates
output_types:
  L3_DSWx_S1:
    - tif
    - png
    - catalog.json
    - iso.xml
    - log
    - qa.log

# The PGE name
# This must MATCH the corresponding entry in pge_outputs.yaml
pge_name: "L3_DSWx_S1"

# Set the primary input/output types here
primary_input: "L2_RTC_S1"
primary_output: "L3_DSWx_S1"

# List the groups that Chimera will need to localize
# The entries MUST reference a property of `$.runconfig` of this YAML.
# The referenced properties MUST be maps.
localize_groups:
  - input_file_group
  - static_ancillary_file_group
  - processing


#######################################################################
# PGE Simulation Mode
#
# * See PGE_SIMULATION_MODE in settings.yaml and it's usage
# * See SIMULATE_OUTPUTS usage in opera_pge_wrapper.py and chimera.precondition_evaluator.py
#######################################################################
input_file_base_name_regexes:
    - '(?P<id>(?P<project>OPERA)_(?P<level>L2)_(?P<product_type>RTC)-(?P<source>S1)_(?P<burst_id>\w{4}-\w{6}-\w{3})_(?P<acquisition_ts>(?P<acq_year>\d{4})(?P<acq_month>\d{2})(?P<acq_day>\d{2})T(?P<acq_hour>\d{2})(?P<acq_minute>\d{2})(?P<acq_second>\d{2})Z)_(?P<creation_ts>(?P<cre_year>\d{4})(?P<cre_month>\d{2})(?P<cre_day>\d{2})T(?P<cre_hour>\d{2})(?P<cre_minute>\d{2})(?P<cre_second>\d{2})Z)_(?P<sensor>S1A|S1B)_(?P<spacing>30)_(?P<product_version>v\d+[.]\d+))$'
sample_input_dataset_id: "OPERA_L2_RTC-S1_T047-100908-IW3_20200702T231843Z_20230305T140222Z_S1B_30_v0.1"
output_base_name: OPERA_L3_DSWx-S1_{tile_id}_{acquisition_ts}_{creation_ts}Z_{sensor}_{spacing}_{product_version}
ancillary_base_name: OPERA_L3_DSWx-S1_{creation_ts}Z_{sensor}_{spacing}_{product_version}
