#######################################################################
# PGE configuration for L3_DISP_S1.
#######################################################################

# The runconfig section is intended to be used for dynamically generating the runconfig file used
# when running the OPERA PGEs. Any values set with a "__CHIMERA_VAL__" should be filled in by the input
# preprocessor. Otherwise, a precondition evaluation error will be raised by chimera.
#
# The runconfig section is also used as the data dict for the RunConfig jinja2 template.
# Accordingly, the schema here does NOT need to match the final RunConfig.yaml schema.
#
# * See RunConfig_schema.<label>.yaml for RunConfig.yaml documentation.
# * See related `RunConfig.yaml.<label>.jinja2.tmpl` file
#  and `util.conf_util.RunConfig.__init__()` for jinja2 usage.
runconfig:
  input_file_group:
    input_file_paths: __CHIMERA_VAL__
    compressed_cslc_paths: __CHIMERA_VAL__
  dynamic_ancillary_file_group:
    static_layers_files: __CHIMERA_VAL__
    mask_file: __CHIMERA_VAL__
    dem_file: __CHIMERA_VAL__
    ionosphere_files: __CHIMERA_VAL__
    # TODO: to be supported in next release
    #troposphere_files: __CHIMERA_VAL__
  static_ancillary_file_group:
    frame_to_burst_json: __CHIMERA_VAL__
    # TODO: unsure if we have this yet or if it even needs to be provided in production
    #reference_date_database_json: __CHIMERA_VAL__
  product_path_group:
    product_version: __CHIMERA_VAL__
    product_path: /home/mamba/output_dir
    scratch_path: /home/mamba/scratch_dir
    save_compressed_slc: __CHIMERA_VAL__
  processing:
    frame_id: __CHIMERA_VAL__
    algorithm_parameters: __CHIMERA_VAL__
    product_type: __CHIMERA_VAL__
    threads_per_worker: __CHIMERA_VAL__
    n_parallel_bursts: __CHIMERA_VAL__
    debug_switch: True  # TODO: Currently enabled to bypass a faulty validation check in the PGE
  cnm_version: "__CHIMERA_VAL__"

# This lists all the precondition evaluation steps that this PGE needs to run prior to running the PGE.
preconditions:
  - get_product_version
  - get_cnm_version
  - set_daac_product_type
  - get_disp_s1_polarization
  - get_disp_s1_frame_id
  - get_disp_s1_product_type
  - get_disp_s1_num_workers
  - get_s3_input_filepaths
  - get_static_ancillary_files
  - get_disp_s1_compressed_cslc_files
  - get_disp_s1_static_layers_files
  - get_disp_s1_ionosphere_files
  # TODO: to be supported in next release
  #- get_disp_s1_troposphere_files
  - get_disp_s1_mask_file
  - get_disp_s1_dem
  - get_disp_s1_save_compressed_slc
  - get_disp_s1_algorithm_parameters
  - instantiate_algorithm_parameters_template

# This lists all the postprocessor steps that this PGE will run after running the PGE.
postprocess:
  - update_product_accountability

get_product_version:
  version_key: "DISP_S1_PRODUCT_VERSION"

set_daac_product_type:
  template: OPERA_L3_DISP_S1_{cnm_version}

get_static_ancillary_files:
  # The s3 locations of each of the static ancillary file types used by DISP-S1
  frame_to_burst_json:
    s3_bucket: "opera-ancillaries"
    s3_key: "disp_frames/disp-s1/0.5.0/opera-s1-disp-0.5.0-frame-to-burst.json"

get_disp_s1_mask_file:
  s3_bucket: "opera-water-mask"
  s3_key: "v0.3/EPSG4326.vrt"

get_disp_s1_algorithm_parameters:
  # This S3 path only defines a location pattern of an algorithm parameters template file,
  # the processing mode (forward vs. historical) will be filled in by the function itself
  s3_bucket: "opera-ancillaries"
  s3_key: "algorithm_parameters/disp_s1/0.4.1/algorithm_parameters_{processing_mode}.yaml.tmpl"

instantiate_algorithm_parameters_template:
  template_mapping:
    polarization: __POLARIZATION__

# This function will add to the PGE output metadata when product to dataset conversion is performed
set_extra_pge_output_metadata:
   daac_product_type: daac_product_type

# List the extensions that the PGE generates
output_types:
  L3_DISP_S1:
    - nc
    - h5
    - png
    - catalog.json
    - iso.xml
    - log
    - qa.log

# The PGE name
# This must MATCH the corresponding entry in pge_outputs.yaml
pge_name: "L3_DISP_S1"

# Set the primary input/output types here
primary_input: "L2_CSLC_S1"
primary_output: "L3_DISP_S1"

# List the groups that Chimera will need to localize
# The entries MUST reference a property of `$.runconfig` of this YAML.
# The referenced properties MUST be maps.
localize_groups:
  - input_file_group
  - dynamic_ancillary_file_group
  - static_ancillary_file_group
  - processing


#######################################################################
# PGE Simulation Mode
#
# * See PGE_SIMULATION_MODE in settings.yaml and it's usage
# * See SIMULATE_OUTPUTS usage in opera_pge_wrapper.py and chimera.precondition_evaluator.py
#######################################################################
input_file_base_name_regexes:
    - '(?P<id>(?P<project>OPERA)_(?P<level>L2)_(?P<product_type>CSLC)-(?P<source>S1)_(?P<burst_id>\w{4}-\w{6}-\w{3})_(?P<acquisition_ts>(?P<acq_year>\d{4})(?P<acq_month>\d{2})(?P<acq_day>\d{2})T(?P<acq_hour>\d{2})(?P<acq_minute>\d{2})(?P<acq_second>\d{2})Z)_(?P<creation_ts>(?P<cre_year>\d{4})(?P<cre_month>\d{2})(?P<cre_day>\d{2})T(?P<cre_hour>\d{2})(?P<cre_minute>\d{2})(?P<cre_second>\d{2})Z)_(?P<sensor>S1A|S1B)(_(?P<pol>VV|VH|HH|HV|VV\+VH|HH\+HV))?_(?P<product_version>v\d+[.]\d+))$'
sample_input_dataset_id: "OPERA_L2_CSLC-S1_T064-135518-IW1_20220501T015035Z_20160822T000000Z_S1A_VV_v0.1"
output_base_name: OPERA_L3_DISP-S1_IW_{frame_id}_{pol}_{ref_datetime}Z_{sec_datetime}Z_{product_version}_{creation_ts}Z
ancillary_base_name: OPERA_L3_DISP-S1_IW_{frame_id}_{product_version}_{creation_ts}Z
compressed_cslc_name: OPERA_L2_COMPRESSED-CSLC-S1_{burst_id}_{ref_date}T000000Z_{first_date}T000000Z_{last_date}T000000Z_{creation_ts}Z_{pol}_{product_version}
