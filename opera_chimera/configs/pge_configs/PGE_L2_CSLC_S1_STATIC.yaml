#######################################################################
# PGE configuration for L2_CSLC_S1_STATIC.
#######################################################################

# The runconfig section is intended to be used for dynamically generating the runconfig file used
# when running the OPERA PGEs. Any values set with a "__CHIMERA_VAL__" should be filled in by the input
# preprocessor. Otherwise, a precondition evaluation error will be raised by chimera.
#
# The runconfig section is also used as the data dict for the RunConfig jinja2 template.
# Accordingly, the schema here does NOT need to match the final RunConfig.yaml schema.
#
# * See RunConfig_schema.<label>.yaml for RunConfig.yaml documentation.
# * See related `RunConfig.yaml.<label>.jinja2.tmpl` file
#  and `util.conf_util.RunConfig.__init__()` for jinja2 usage.
runconfig:
  input_file_group:
    safe_file_path: __CHIMERA_VAL__
    orbit_file_path: __CHIMERA_VAL__
  dynamic_ancillary_file_group:
    dem_file: __CHIMERA_VAL__
    tec_file: __CHIMERA_VAL__
  static_ancillary_file_group:
    burst_database_file: __CHIMERA_VAL__
  product_path_group:
    static_product_version: __CHIMERA_VAL__
    product_path: /home/compass_user/output_dir
    scratch_path: /home/compass_user/scratch_dir
    data_validity_start_date: __CHIMERA_VAL__
    product_specification_version: __CHIMERA_VAL__
  processing:
    polarization: co-pol
  cnm_version: "__CHIMERA_VAL__"

# This lists all the precondition evaluation steps that this PGE needs to run prior to running the PGE.
preconditions:
  - get_static_product_version
  - get_data_validity_start_date
  - get_cslc_product_specification_version
  - get_slc_s1_safe_file
  - get_slc_s1_orbit_file
  - get_slc_s1_dem  # Note: this must be run after get_slc_s1_safe_file
  - get_slc_s1_tec_file
  - get_slc_s1_burst_database
  - get_cnm_version
  - set_daac_product_type

# This lists all the postprocessor steps that this PGE will run after running the PGE.
postprocess:
  - update_product_accountability

get_static_product_version:
  version_key: "CSLC_S1_STATIC_PRODUCT_VERSION"

get_slc_s1_dem:
  # The s3 location containing the global DEM(s) to download regions from
  s3_bucket: "opera-dem"
  s3_key: "v1.1"

get_slc_s1_burst_database:
  # The s3 location of the burst database file to use with each job
  s3_bucket: "opera-burstdb"
  s3_key: "burst_db_0.2.0_230831-bbox-only.sqlite"

set_daac_product_type:
  template: OPERA_L2_CSLC_S1_STATIC_{cnm_version}

# This function will add to the PGE output metadata when product to dataset conversion is performed
set_extra_pge_output_metadata:
   daac_product_type: daac_product_type

# List the extensions that the PGE generates
output_types:
  L2_CSLC:
    - h5
    - catalog.json
    - iso.xml
    - log
    - qa.log

# The PGE name
# This must MATCH the corresponding entry in pge_outputs.yaml
pge_name: "L2_CSLC_S1_STATIC"

# Set the primary input/output types here
primary_input: "L1_S1_SLC"
primary_output: "L2_CSLC_S1_STATIC"

# List the groups that Chimera will need to localize
# The entries MUST reference a property of `$.runconfig` of this YAML.
# The referenced properties MUST be maps.
localize_groups:
  - input_file_group
  - dynamic_ancillary_file_group
  - static_ancillary_file_group


#######################################################################
# PGE Simulation Mode
#
# * See PGE_SIMULATION_MODE in settings.yaml and it's usage
# * See SIMULATE_OUTPUTS usage in opera_pge_wrapper.py and chimera.precondition_evaluator.py
#######################################################################
input_file_base_name_regexes: # regexes taken from settings.yaml
    - '(?P<mission_id>S1[A-C])_(?P<beam_mode>IW)_(?P<product_type>SLC)(?P<resolution>_)_(?P<level>1)(?P<class>S)(?P<pol>SH|SV|DH|DV)_(?P<start_ts>(?P<start_year>\d{4})(?P<start_month>\d{2})(?P<start_day>\d{2})T(?P<start_hour>\d{2})(?P<start_minute>\d{2})(?P<start_second>\d{2}))_(?P<stop_ts>(?P<stop_year>\d{4})(?P<stop_month>\d{2})(?P<stop_day>\d{2})T(?P<stop_hour>\d{2})(?P<stop_minute>\d{2})(?P<stop_second>\d{2}))_(?P<orbit_num>\d{6})_(?P<data_take_id>[0-9A-F]{6})_(?P<product_id>[0-9A-F]{4})[-]r(?P<revision_id>\d+)$'
output_base_name: OPERA_L2_CSLC-S1-STATIC_{burst_id}_{validity_ts}_{sensor}_{product_version}
ancillary_base_name: OPERA_L2_CSLC-S1_{creation_ts}Z_{sensor}_{pol}_{product_version}
