RunConfig:
  Name: str()

  Groups:
    PGE:
      PGENameGroup:
        PGEName: str(required=True)

      InputFilesGroup:
        InputFilePaths: list(str(), min=1, required=True)

      DynamicAncillaryFilesGroup:
        AncillaryFileMap: map(key=str(), min=0)

      ProductPathGroup:
        OutputProductPath: str(required=True)
        ScratchPath: str(required=True)

      PrimaryExecutable:
        ProductIdentifier: str(required=False)
        ProductVersion: any(str(), num(), required=False)
        CompositeReleaseID: str(required=False)
        ProgramPath: str(required=True)
        ProgramOptions: list(str(), min=0, required=False)
        ErrorCodeBase: int(required=True)
        SchemaPath: str(required=True)
        AlgorithmParametersSchemaPath: str(required=False)
        IsoTemplatePath: str(required=False)
        IsoMeasuredParameterDescriptions: str(required=False)
        DataValidityStartDate: int(min=20000101, max=21991231, required=False)

      QAExecutable:
        Enabled: bool(required=True)
        ProgramPath: str(required=False)
        ProgramOptions: list(str(), min=0, required=False)

      DebugLevelGroup:
        DebugSwitch: bool(required=False)
        ExecuteViaShell: bool(required=False)
    SAS:
      runconfig:
        name: str()

        groups:
          pge_name_group:
            pge_name: enum('DSWX_HLS_PGE')

          input_file_group:
            # REQUIRED - Single HLS dataset (directory or files)
            input_file_path: list(str(), min=1)

          dynamic_ancillary_file_group:
            # Digital elevation model file
            # (REQUIRED if check_ancillary_inputs_coverage is True)
            dem_file: str(required=False)

            # Digital elevation model description
            dem_file_description: str(required=False)

            # Copernicus Global Land Service (CGLS) Land Cover Layer file
            # (REQUIRED if check_ancillary_inputs_coverage is True)
            landcover_file: str(required=False)

            # Copernicus Global Land Service (CGLS) Land Cover Layer description
            landcover_file_description: str(required=False)

            # ESA WorldCover map file
            # (REQUIRED if check_ancillary_inputs_coverage is True)
            worldcover_file: str(required=False)

            # ESA WorldCover map description
            worldcover_file_description: str(required=False)

            # NOAA GSHHS shapefile
            # (REQUIRED if check_ancillary_inputs_coverage is True)
            shoreline_shapefile: str(required=False)

            # NOAA GSHHS shapefile description
            shoreline_shapefile_description: str(required=False)

          primary_executable:
            product_type: enum('DSWX_HLS')

          product_path_group:
            # Directory where PGE will place results
            product_path: str()

            # Directory where SAS can write temporary data
            scratch_path: str()

            # SAS writes DSWx-HLS products as a set of GeoTIFF layers
            # All files are saved within the output_directory following
            # the scheme:
            # {output_dir}/{product_id}_v{product_version}_B{layer_number}_{layer_name}.tif
            # The default value for `product_id` is "dswx_hls".
            # The default value for `product_version` is the PROTEUS software version.
            # `layer_number` and `layer_name` are automatically set by the DSWx-HLS SAS
            # The PGE should update `product_id` and `product_version`
            # according to the DSWx-HLS product specs.

            output_dir: str()
            product_id: str()
            product_version: num(required=False)

          processing:

            # Check if ancillary inputs cover entirely the output product
            check_ancillary_inputs_coverage: bool(required=False)

            # Apply ocean masking
            apply_ocean_masking: bool(required=False)

            # Apply aerosol class remapping
            apply_aerosol_class_remapping: bool(required=False)

            # HLS Fmask values to convert not-water to high-confidence water
            # in the presence of high aerosol
            aerosol_not_water_to_high_conf_water_fmask_values: list(int(), min=0, required=False)

            # HLS Fmask values to convert moderate-confidence water to
            # high-confidence water in the presence of high aerosol
            aerosol_water_moderate_conf_to_high_conf_water_fmask_values: list(int(), min=0, required=False)

            # HLS Fmask values to convert partial surface water conservative to
            # high-confidence water in the presence of high aerosol
            aerosol_partial_surface_water_conservative_to_high_conf_water_fmask_values: list(int(), min=0, required=False)

            # HLS Fmask values to convert partial surface water aggressive to
            # high-confidence water in the presence of high aerosol
            aerosol_partial_surface_aggressive_to_high_conf_water_fmask_values: list(int(), min=0, required=False)

            # Select shadow masking algorithm
            shadow_masking_algorithm: enum('otsu', 'sun_local_inc_angle', required=False)

            # Minimum slope angle in degrees for terrain masking
            min_slope_angle: num(min=-180, max=180, required=False)

            # Maximum sun local-incidence angle in degrees for terrain masking
            max_sun_local_inc_angle: num(min=-180, max=180, required=False)

            # Define how areas adjacent to cloud/cloud-shadow should be handled
            mask_adjacent_to_cloud_mode: enum('mask', 'ignore', 'cover', required=False)

            # Copernicus CGLS Land Cover 100m forest classes to mask out from
            # the WTR-2 and WTR layer due to dark reflectance that is usually
            # misinterpreted as water.
            forest_mask_landcover_classes: list(int(), min=0, required=False)

            # Ocean masking distance from shoreline in km
            ocean_masking_shoreline_distance_km: num(required=False)

            # Layer 1 - WTR
            save_wtr: bool(required=False)

            # Layer 2 - BWTR
            save_bwtr: bool(required=False)

            # Layer 3 - CONF
            save_conf: bool(required=False)

            # Layer 4 - DIAG
            save_diag: bool(required=False)

            # Layer 5 - WTR-1
            save_wtr_1: bool(required=False)

            # Layer 6 - WTR-2
            save_wtr_2: bool(required=False)

            # Layer 7 - LAND
            save_land: bool(required=False)

            # Layer 8 - SHAD
            save_shad: bool(required=False)

            # Layer 9 - CLOUD
            save_cloud: bool(required=False)

            # Layer 10 - DEM
            save_dem: bool(required=False)

            # Reflectance RGB color composition
            save_rgb: bool(required=False)

            # SWIR-1, NIR, and Red reflectance color composition
            save_infrared_rgb: bool(required=False)

          browse_image_group:
            # Save a full-res Cloud-Optimized GEOTIFF DSWx-HLS browse image and
            # a modified-resolution PNG of the browse image for DSWx-HLS
            save_browse: bool(required=False)

            # Setting `browse_image_height` and `browse_image_width` equal
            # will maintain this original HLS and DSWx-HLS aspect ratio
            # of 3660 pixels x 3660 pixels for the PNG browse image.
            # If these fields are left empty, 1024 x 1024 will be used.

            # Height in pixels for the PNG browse image
            browse_image_height: int(min=1, required=False)

            # Width in pixels for the PNG browse image
            browse_image_width: int(min=1, required=False)

            # Flag to exclude the Partial Surface Water Aggressive (PSW-Agg)
            # class in the browse image. If True, PSW-Agg pixels will
            # appear as Not Water. If False, this class will be displayed
            # in the browse image, same as in WTR. Default is False.
            exclude_psw_aggressive_in_browse: bool(required=False)

            # Define how Not Water (e.g. land) appears in the browse image.
            # Defaults to 'white'.
            # Options are: 'white', 'nodata'
            #   'white'         : Not Water pixels will be white
            #   'nodata'        : Not Water pixels will be marked as not having
            #                     valid data, and will be fully transparent
            not_water_in_browse: enum('white', 'nodata', required=False)

            # Define how cloud appears in the browse image.
            # Defaults to 'gray'.
            # Options are: 'gray', 'nodata'
            #   'gray'          : cloud pixels will be opaque gray
            #   'nodata'        : cloud pixels will be marked as not having
            #                     valid data, and will be fully transparent
            cloud_in_browse: enum('gray', 'nodata', required=False)

            # Define how snow appears in the browse image.
            # Defaults to 'cyan'.
            # Options are: 'cyan', 'gray', 'nodata'
            #   'cyan'          : snow will be opaque cyan
            #   'gray'          : snow will be opaque gray
            #   'nodata'        : snow pixels will be marked as not having
            #                     valid data, and will be fully transparent
            snow_in_browse: enum('cyan', 'gray', 'nodata', required=False)

          hls_thresholds: include('hls_thresholds_options', required=False)

---

hls_thresholds_options:

  # Modified Normalized Difference Wetness Index (MNDWI) Threshold
  wigt: num(required=False)

  # Automated Water Extent Shadow Threshold
  awgt: num(required=False)

  # Partial Surface Water Test-1 MNDWI Threshold
  pswt_1_mndwi: num(required=False)

  # Partial Surface Water Test-1 NIR Threshold
  pswt_1_nir: num(required=False)

  # Partial Surface Water Test-1 SWIR1 Threshold
  pswt_1_swir1: num(required=False)

  # Partial Surface Water Test-1 NDVI Threshold
  pswt_1_ndvi: num(required=False)

  # Partial Surface Water Test-2 MNDWI Threshold
  pswt_2_mndwi: num(required=False)

  # Partial Surface Water Test-2 Blue Threshold
  pswt_2_blue: num(required=False)

  # Partial Surface Water Test-2 NIR Threshold
  pswt_2_nir: num(required=False)

  # Partial Surface Water Test-2 SWIR1 Threshold
  pswt_2_swir1: num(required=False)

  # Partial Surface Water Test-2 SWIR2 Threshold
  pswt_2_swir2: num(required=False)

  # Land Cover Mask based test Near Infrared
  lcmask_nir: num(required=False)
