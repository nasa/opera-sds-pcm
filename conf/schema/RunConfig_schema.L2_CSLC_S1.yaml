RunConfig:
  Name: str()

  Groups:
    PGE:
      PGENameGroup:
        PGEName: str(required=True)

      InputFilesGroup:
        InputFilePaths: list(str(), min=1, required=True)

      DynamicAncillaryFilesGroup:
        AncillaryFileMap: map(str(), key=str(), min=0)

      ProductPathGroup:
        OutputProductPath: str(required=True)
        ScratchPath: str(required=True)

      PrimaryExecutable:
        ProductIdentifier: str(required=False)
        ProductVersion: any(str(), num(), required=False)
        CompositeReleaseID: str(required=False)
        ProgramPath: str(required=True)
        ProgramOptions: list(str(), min=0, required=False)
        ErrorCodeBase: int(required=True)
        SchemaPath: str(required=True)
        AlgorithmParametersSchemaPath: str(required=False)
        IsoTemplatePath: str(required=False)
        IsoMeasuredParameterDescriptions: str(required=False)
        DataValidityStartDate: int(min=20000101, max=21991231, required=False)

      QAExecutable:
        Enabled: bool(required=True)
        ProgramPath: str(required=False)
        ProgramOptions: list(str(), min=0, required=False)

      DebugLevelGroup:
        DebugSwitch: bool(required=False)
        ExecuteViaShell: bool(required=False)

    SAS:
      runconfig:
        name: str()

        groups:
          pge_name_group:
            pge_name: enum('CSLC_S1_PGE')

          input_file_group:
            # Required. List of SAFE files (min=1)
            safe_file_path: list(str(), min=1)
            # Required. List of orbit (EOF) files
            orbit_file_path: list(str(), min=1)
            # The unique burst ID(s) to process. If nothing provided, all bursts
            # in a SAFE will processed
            burst_id: list(str(), min=1, required=False)

          dynamic_ancillary_file_group:
            # Digital Elevation Model.
            dem_file: str(required=False)
            # Description for DEM used for the processing
            dem_description: str(required=False)
            # TEC file in IONEX format for ionosphere correction
            tec_file: str(required=False)
            # Troposphere weather model
            weather_model_file: str(required=False)

          static_ancillary_file_group:
            # burst database sqlite file
            burst_database_file: str(required=False)

          product_path_group:
            # Directory where PGE will place results
            product_path: str()
            # Directory where SAS can write temporary data
            scratch_path: str()
            # Intermediate file name. SAS writes the output to this file.
            # PGE may rename the product according to file naming convention
            sas_output_file: str()
            # Product version
            product_version: str(required=False)
            # Product specification document version
            product_specification_version: str(required=False)

          primary_executable:
            product_type: enum('CSLC_S1', 'CSLC_S1_STATIC')

          # This section includes parameters to tweak the workflow
          processing: include('processing_options', required=False)

          # Worker options (e.g. enable/disable GPU processing, select GPU device ID)
          worker: include('worker_options', required=False)

          # Quality assurance options
          quality_assurance: include('quality_assurance_options', required=False)

          # Output options for geocoded rasters (CSLC datatype, compression, chunking, shuffle filter)
          output: include('output_options', required=False)
---
# Group of processing options
processing_options:
  # Polarization to process. 3 modes below correspond to VV, VH, VV+VH
  polarization: enum('co-pol', 'cross-pol', 'dual-pol', required=False)
  # Options to run geocoding
  geocoding: include('geocoding_options', required=False)
  # Options to run geo2rdr
  geo2rdr: include('geo2rdr_options', required=False)
  # Options to generate model-based slant range and azimuth correction LUTs
  correction_luts: include('lut_options', required=False)
  # Computation of topo layers
  rdr2geo: include('rdr2geo_options', required=False)

geocoding_options:
  # Boolean flag to enable/disable flattening
  flatten: bool(required=False)
  # Product posting along X (same units as burst center EPSG)
  x_posting: num(min=0, required=False)
  # Product posting along Y (same units as burst center EPSG)
  y_posting: num(min=0, required=False)
  # Controls the product grid along X (same units as burst center EPSG)
  x_snap: num(min=0, required=False)
  # Controls the product grid along Y (same units as burst center EPSG)
  y_snap: num(min=0, required=False)

geo2rdr_options:
  # Convergence threshold for geo2rdr algorithm
  threshold: num(min=0, required=False)
  # Maximum number of iterations
  numiter: int(min=1, required=False)
  # Lines per block to process in batch
  lines_per_block: int(min=1, required=False)

lut_options:
  # Boolean flag to activate/deactivate model-based
  # corrections while geocoding the burst
  enabled: bool(required=False)
  # LUT spacing in range direction in meters
  range_spacing: num(min=0, required=False)
  # LUT spacing in azimuth direction in seconds
  azimuth_spacing: num(min=0, required=False)
  # Troposphere delay using weather model
  troposphere: include('troposphere_options', required=False)

troposphere_options:
  # Type of troposphere delay. Any of 'dry', 'wet' or 'wet_dry' for
  # the sum of wet and dry delays
  delay_type: enum('dry', 'wet', 'wet_dry', required=False)

rdr2geo_options:
  # Convergence threshold for rdr2geo algorithm
  threshold: num(min=0, required=False)
  # Maximum number of iterations
  numiter: int(min=1, required=False)
  # Lines per block to process in batch
  lines_per_block: int(min=1, required=False)
  # Secondary number of iterations
  extraiter: int(min=1, required=False)
  # Enable/disable computation of latitude raster
  compute_latitude: bool(required=False)
  # Enable/disable computation of longitude raster
  compute_longitude: bool(required=False)
  # Enable/disable computation of height raster
  compute_height: bool(required=False)
  # Enable/disable layover shadow mask output
  compute_layover_shadow_mask: bool(required=False)
  # Enable/disable local incidence output
  compute_local_incidence_angle: bool(required=False)
  # Enable/disable ground to satellite East LOS vector
  compute_ground_to_sat_east: bool(required=False)
  # Enable/disable ground to satellite North LOS vector
  compute_ground_to_sat_north: bool(required=False)

worker_options:
  # To prevent downloading DEM / other data automatically. Default True
  internet_access: bool(required=False)
  # Enable/Disable GPU processing capabilities. Default False
  gpu_enabled: bool(required=False)
  # Index of the GPU to use for processing, optional. Defaults to the
  # first available CUDA device. Ignored if *gpu_enabled* is False.
  gpu_id: int(min=0, required=False)

quality_assurance_options:
  # Options for generating browse images
  browse_image: include('browse_image_options', required=False)
  # Enable/disable computation of statistics of CSLC rasters and corrections
  perform_qa: bool(required=False)
  # Enable/disable writing of QA information to JSON
  output_to_json: bool(required=False)

browse_image_options:
  # Enable/disable generation of CSLC browse image
  enabled: bool(required=False)
  # How to convert complex CSLC to real
  complex_to_real: enum('amplitude', 'intensity', 'logamplitude', required=False)
  # Lower percentile of non-nan pixels to clip
  percent_low: num(min=0, required=False)
  # Higher percentile of non-nan pixels to clip
  percent_high: num(min=0, required=False)
  # Gamma exponent applied to normalized image
  gamma: num(min=0, required=False)
  # Enable/disable histogram equalization
  equalize: bool(required=False)

output_options:
  # Data type of CSLC raster (default complex64_zero_mantissa)
  cslc_data_type: enum('complex32', 'complex64', 'complex64_zero_mantissa', required=False)
  # Enable/disable gzip compression of raster (default True)
  compression_enabled: bool(required=False)
  # Level of compression applied to raster (default 4)
  # 1 - least compression, 9 - best compresssion
  compression_level: int(min=1, max=9, required=False)
  # Chunk size of raster (default [128, 128])
  chunk_size: list(int(min=4), min=2, max=2, required=False)
  # Enable/disable shuffle filtering of rasters (default True)
  shuffle: bool(required=False)

